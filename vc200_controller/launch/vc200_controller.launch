<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- <rosparam file="$(find vc200_controller)/cfg/controllers.yaml" subst_value="true" command="load" /> -->

    <!-- <node name="controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn imu_sensor_controller" /> -->
    <arg name="robot_name" default="vc200" />

    <rosparam file="$(find vc200_controller)/cfg/controllers.yaml" subst_value="true" command="load" />

    <node name="robot_driver" pkg="vc200_controller" type="vc200_controller_node" output="screen" respawn="true">

        <rosparam file="$(find vc200_driver)/cfg/stm_config.yaml" subst_value="true" command="load" />
    </node>
    <node name="controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn 
    imu_sensor_controller 
    state 
    diff_drive" />
    <!-- <node name="imu_sensor_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="imu_sensor_controller" /> -->

    <!-- <node name="imu_sensor_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="imu_sensor_controller" /> -->
    <!-- <node name="controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn 
        imu_sensor_controller 
        state 
        front_left_velocity
        front_right_velocity
        rear_left_velocity
        rear_right_velocity "/> -->


    <node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
        <param name="serial_port" type="string" value="/dev/ttyUSB0" />
        <param name="serial_baudrate" type="int" value="115200" /> <!--A1/A2 -->
        <!--param name="serial_baudrate"     type="int"    value="256000"-->
        <!--A3 -->
        <param name="frame_id" type="string" value="$(arg robot_name)/lidar_link" />
        <param name="inverted" type="bool" value="false" />
        <param name="angle_compensate" type="bool" value="true" />
    </node>

    <include file="$(find vc200_description)/launch/model.launch" />

    <!-- <node pkg="tf" type="static_transform_publisher" name="pozyx_broadcaster" args="0 0 0 0 0 0 map vc200/pozyx_link 100" /> -->

    <include file="$(find pozyx_ros)/launch/pozyx.launch" />

    <node name="map_server" pkg="map_server" type="map_server" args="$(find vc200_controller)/cfg/maps/map.yaml">
        <param name="frame_id" value="map" />
    </node>

    <node name="ekf_localization" pkg="robot_localization" type="ekf_localization_node" output="screen">
        <rosparam file="$(find vc200_controller)/cfg/ekf_localization.yaml" subst_value="true" command="load" />
        <remap from="odometry/filtered" to="ekf_odom" />
    </node>

    <node name="ekf_localization_map" pkg="robot_localization" type="ekf_localization_node" output="screen">
        <rosparam file="$(find vc200_controller)/cfg/ekf_localization_map.yaml" subst_value="true" command="load" />
        <remap from="odometry/filtered" to="odometry" />
    </node>

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <param name="tf_broadcast" value="false" />

        <param name="base_frame_id" value="vc200/base_footprint" /> <!-- Change this if you want to change your base frame id. -->
        <param name="odom_frame_id" value="vc200/odom" />

        <param name="gui_publish_rate" value="10.0" /> <!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. -->
        <param name="kld_err" value="0.05" />
        <param name="kld_z" value="0.99" />
        <param name="laser_lambda_short" value="0.1" />
        <param name="laser_likelihood_max_dist" value="2.0" />
        <param name="laser_max_beams" value="30" />
        <param name="laser_model_type" value="likelihood_field" />
        <param name="laser_sigma_hit" value="0.2" />
        <param name="laser_z_hit" value="0.5" />
        <param name="laser_z_short" value="0.05" />
        <param name="laser_z_max" value="0.05" />
        <param name="laser_z_rand" value="0.5" />
        <param name="max_particles" value="2000" />
        <param name="min_particles" value="500" />
        <param name="odom_alpha1" value="0.2" /> <!-- Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion. -->
        <param name="odom_alpha2" value="0.2" /> <!-- Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion. -->
        <param name="odom_alpha3" value="0.8" /> <!-- Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion. -->
        <param name="odom_alpha4" value="0.4" /> <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
        <param name="odom_alpha5" value="0.1" /> <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
        <param name="odom_model_type" value="diff" />
        <param name="recovery_alpha_slow" value="0.0" /> <!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. -->
        <param name="recovery_alpha_fast" value="0.0" /> <!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. -->
        <param name="resample_interval" value="1" /> <!-- Number of filter updates required before resampling. -->
        <param name="transform_tolerance" value="0.2" />
        <param name="update_min_a" value="0.2" /> <!-- Rotational movement required before performing a filter update. 0.1 represents 5.7 degrees  -->
        <param name="update_min_d" value="0.2" /> <!-- Translational movement required before performing a filter update. -->
    </node>
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <arg name="rate" default="100" />
    <arg name="ignore_timestamp" default="true" />
    <arg name="use_tf_static" default="true" />
    <!-- <arg name="model" default="$(find vc200_description)/urdf/test.xacro" /> -->

    <!-- <arg name="paused" default="false" />
    <arg name="gui" default="true" /> -->
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />
    <arg name="gui_required" default="true" />
    <arg name="mesh_enabled" default="true" />
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <remap from="cmd_vel" to="/diff_drive/cmd_vel"/>
        <rosparam file="$(find vc200_controller)/cfg/nav/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find vc200_controller)/cfg/nav/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find vc200_controller)/cfg/nav/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find vc200_controller)/cfg/nav/global_costmap_params.yaml" command="load" />
        
        <param name="base_global_planner" value="global_planner/GlobalPlanner" />
        <param name="planner_frequency" value="1.0" />
        <param name="planner_patience" value="5.0" />
        
        <rosparam file="$(find vc200_controller)/cfg/nav/base_local_planner_params3.yaml" command="load" />
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS" />
        
        <!-- <rosparam file="$(find vc200_controller)/cfg/nav/teb_local_planner_params2.yaml" command="load" />
        <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
       
        <rosparam file="$(find vc200_controller)/cfg/nav/dwa_local_planner_params1.yaml" command="load" />
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />

        <rosparam file="$(find vc200_controller)/cfg/nav/eband_local_planner_params3.yaml" command="load" />
        <param name="base_local_planner" value="eband_local_planner/EBandPlannerROS" />

        <rosparam file="$(find vc200_controller)/cfg/nav/mpc_local_planner_params1.yaml" command="load" />
        <param name="base_local_planner" value="mpc_local_planner/MpcLocalPlannerROS" /> -->
            
        <param name="controller_frequency" value="5.0" />
        <param name="controller_patience" value="15.0" />
    </node>


</launch>